#!/bin/sh

## Proof of concept, how to read in a .b3p-file and transmit it to the ZFXB3. Not ready yet.
## e.g.
## ./zoofxb3p.sh /path/to/filename.b3p 

# Script handling:
# Protect scripts (errexit -e, nounset -u, noglob -f)
set -euf
# Bash
#set -euf -o posix -o pipefail

## known issues:
## accept only values between 0 - 127. Comes into conflict with Total PATCH LEVEL/Tempo/and maybe some patches.
## The select bank option works only upto F9. 
## All commands must be send seperate in this configuration or && . In the other configuration you must send all together.  
## Debug display name!
## Easy to understand, but too much code. Reduce it!

lastarg() {
  shift "$1"
  printf '%s\n' "$1"
}

file=$(lastarg $# "$@") 

# Parse arguments
usage() {
    echo "Usage: $0 [-h] [-v] [-b bank]  /path/to/file.b3p"
    echo "  -b  Add on. Select bank. (A0 - J9)" Need capital letters. Works only from A0 to F9 at the moment. # invalid character -
    echo "  -f  Specify a .b3p-file and transmit config to device."
    echo "  -h  Help. Display this message and quit."
    echo "  -p  Add on. Flip signal chain path forward/backward. (0 / 1)"
    echo "  -r  Add on. Reset changes from the preset and quit. Works from time to time." #(?Not inside Total-/Globalmodus)
#    echo "  -t  *Not implemented yet* Add on. Define Tempo."
    echo "  -v  Version. Print version number and quit."
    exit
}

# device hardware port
port=$(amidi -l | tail -n 1 | cut -d " " -f 3)
if [ -z "$port" ]; then
  printf "%s\n" "Failed to receive the hardware port."
fi

bank=""
optspec="b:hvrfp:"
while getopts "$optspec" optchar
do
    case "${optchar}" in
        'b')
            bank="$OPTARG"
            printf "%s\n" "$bank"
	    bankd=$(printf "%s\n" "ibase=16; $bank" | bc)
            printf "%s\n" "bankd: $bankd" 
            banks=$(printf "%s\n" "scale=0; $bankd-160" | bc)
            printf "%s\n" "banks: $banks"
            varc=$(printf "%s\n" "obase=16; $banks" | bc)
            printf "%s\n" "varc: $varc"
	    varh=$(printf "%s\n" "obase=16; $varc" | bc)
	    printf "%s\n" "varh: $varh"
	    amidi -p "$port" -S "C0 $varh"
#	    exit 1
	    ;;
#        'f')
#            file=$"{OPTARG}"
#            ;;
        'h')
            usage
            ;;
        'p')  
            path=${OPTARG}
	    amidi -p "$port" -S "F0 52 00 4F 50 F7" && amidi -p "$port" -S "F0 52 00 4F 31 03 09 $path 00 F7" && amidi -p "$port" -S "F0 52 00 4F 51 F7" >&2
#            exit
            ;;
        'r')
            amidi -p "$port" -S "F0 52 00 4F 51 F7" >&2
            exit
            ;;
        'v')
            echo "0.00.005 alpha"
            exit
            ;;
        *)
            usage
            ;;
    esac
done

# product
prod=$(xml sel -t -v "(PatchData/Product)" -n "$file")
#printf "%s\n" $prod
case "$prod" in
        B3) mod=4F
            ;;
#        G3n) mod=59
#             ;;
#        B2) mod=??
#            ;;
#        G5) mod=??
#            ;;
        *) echo "Device or file type is not supported."
           exit 1
           ;;
esac
#printf "%s\n" "$mod"


## Identify device
id=$(amidi -p hw:2,0,0 -S "F0 7E 00 06 01 F7" -d -t 0.4 | tail -n 1)
echo "id: $id"

# System version
verh=$(printf "%s" "$id" | cut -c 31-41)
echo "verh: $verh"
vers=$(for c in $(printf "%s" "$verh"); do printf "\x$c"; done)
echo "vers: $vers"

# Patch version
pver=$(xml sel -t -v "(PatchData/Version)" -n "$file")
echo "pver: $pver"

# Compare Version
if [ "$vers" = "$pver" ]; then
  printf "%s\n" "Same version."
elif [ "$vers" != "$pver" ]; then
  printf "%s\n" "The versions does not match. To prevent harm and damages it will not be send to the device."
  printf "%s\n" "It could also work, try changing the patch to <Version>$vers</Version> manually."
  printf "%s\n" "There is no force option available at the moment."
  exit 10
fi

# Unlock device
printf "%s\n" "Open Sesame!"
amidi -p "$port" -S "F0 52 00 $mod 50 F7" -i 0.2

####################
#flip=$(echo "$6")
#printf "%s\n" $flip
#amidi -p "$port" -S "F0 52 00 $mod 31 03 09 $flip 00 F7" -i 0.2
####################

# Patchname
pname=$(xml sel -t -v "(PatchData/Name)" -n "$file")
printf "%s\n" "$pname"

pname0=$(printf "%s" "$pname" | cut -c 1-1)
printf "%s\n" "pname0: $pname0"
pname0h=$(printf "%s" "$pname0" | od -A n -t x1)
printf "%s\n" "$pname0h"
case $pname0h in
  "")
    amidi -p "$port" -S "F0 52 00 $mod 31 04 00 20 00 F7" -i 0.2
    printf "%s\n" "was unset, remove character with space"
    ;;
  ' 2a')
    amidi -p "$port" -S "F0 52 00 $mod 31 04 00 20 00 F7" -i 0.2
    printf "%s\n" "was blank, remove character with space"
    ;;
  *)
    amidi -p "$port" -S "F0 52 00 $mod 31 04 00 $pname0h 00 F7" -i 0.2
    printf "%s\n" "$pname0h"
esac

pname1=$(printf "%s" "$pname" | cut -c 2-2)
printf "%s\n" "pname1: $pname1"
pname1h=$(printf "%s" "$pname1" | od -A n -t x1)
printf "%s\n" "$pname1h"
case $pname1h in
  "")
    amidi -p "$port" -S "F0 52 00 $mod 31 04 01 20 00 F7" -i 0.2
    printf "%s\n" "was unset, remove character with space"
    ;;
  ' 2a')
    amidi -p "$port" -S "F0 52 00 $mod 31 04 01 20 00 F7" -i 0.2
    printf "%s\n" "was blank, remove character with space"
    ;;
  *)
    amidi -p "$port" -S "F0 52 00 $mod 31 04 01 $pname1h 00 F7" -i 0.2
    printf "%s\n" "$pname1h"
esac

pname2=$(printf "%s" "$pname" | cut -c 3-3)
printf "%s\n" "pname2: $pname2"
pname2h=$(printf "%s" "$pname2" | od -A n -t x1)
printf "%s\n" "$pname2h"
case $pname2h in
  "")
    amidi -p "$port" -S "F0 52 00 $mod 31 04 02 20 00 F7" -i 0.2
    printf "%s\n" "was unset, remove character with space"
    ;;
  ' 2a')
    amidi -p "$port" -S "F0 52 00 $mod 31 04 02 20 00 F7" -i 0.2
    printf "%s\n" "was blank, remove character with space"
    ;;
  *)
    amidi -p "$port" -S "F0 52 00 $mod 31 04 02 $pname2h 00 F7" -i 0.2
    printf "%s\n" "$pname2h"
esac

pname3=$(printf "%s" "$pname" | cut -c 4-4)
printf "%s\n" "pname3: $pname3"
pname3h=$(printf "%s" "$pname3" | od -A n -t x1)
printf "%s\n" "$pname3h"
case $pname3h in
  "")
    amidi -p "$port" -S "F0 52 00 $mod 31 04 03 20 00 F7" -i 0.2
    printf "%s\n" "was unset, remove character with space"
    ;;
  ' 2a')
    amidi -p "$port" -S "F0 52 00 $mod 31 04 03 20 00 F7" -i 0.2
    printf "%s\n" "was blank, remove character with space"
    ;;
  *)
    amidi -p "$port" -S "F0 52 00 $mod 31 04 03 $pname3h 00 F7" -i 0.2
    printf "%s\n" "$pname3h"
esac

pname4=$(printf "%s" "$pname" | cut -c 5-5)
printf "%s\n" "pname4: $pname4"
pname4h=$(printf "%s" "$pname4" | od -A n -t x1)
printf "%s\n" "$pname4h"
case $pname4h in
  "")
    amidi -p "$port" -S "F0 52 00 $mod 31 04 04 20 00 F7" -i 0.2
    printf "%s\n" "was unset, remove character with space"
    ;;
  ' 2a')
    amidi -p "$port" -S "F0 52 00 $mod 31 04 04 20 00 F7" -i 0.2
    printf "%s\n" "was blank, remove character with space"
    ;;
  *)
    amidi -p "$port" -S "F0 52 00 $mod 31 04 04 $pname4h 00 F7" -i 0.2
    printf "%s\n" "$pname4h"
esac

pname5=$(printf "%s" "$pname" | cut -c 6-6)
printf "%s\n" "pname5: $pname5"
pname5h=$(printf "%s" "$pname5" | od -A n -t x1)
printf "%s\n" "$pname5h"
case $pname5h in
  "")
    amidi -p "$port" -S "F0 52 00 $mod 31 04 05 20 00 F7" -i 0.2
    printf "%s\n" "was unset, remove character with space"
    ;;
  ' 2a')
    amidi -p "$port" -S "F0 52 00 $mod 31 04 05 20 00 F7" -i 0.2
    printf "%s\n" "was blank, remove character with space"
    ;;
  *)
    amidi -p "$port" -S "F0 52 00 $mod 31 04 05 $pname5h 00 F7" -i 0.2
    printf "%s\n" "$pname5h"
esac

pname6=$(printf "%s" "$pname" | cut -c 7-7)
printf "%s\n" "pname6: $pname6"
pname6h=$(printf "%s" "$pname6" | od -A n -t x1)
printf "%s\n" "$pname6h"
case $pname6h in
  "")
    amidi -p "$port" -S "F0 52 00 $mod 31 04 06 20 00 F7" -i 0.2
    printf "%s\n" "was unset, remove character with space"
    ;;
  ' 2a')
    amidi -p "$port" -S "F0 52 00 $mod 31 04 06 20 00 F7" -i 0.2
    printf "%s\n" "was blank, remove character with space"
    ;;
  *)
    amidi -p "$port" -S "F0 52 00 $mod 31 04 06 $pname6h 00 F7" -i 0.2
    printf "%s\n" "$pname6h"
esac

pname7=$(printf "%s" "$pname" | cut -c 8-8)
printf "%s\n" "pname7: $pname7"
pname7h=$(printf "%s" "$pname7" | od -A n -t x1)
printf "%s\n" "$pname7h"
case $pname7h in
  "")
    amidi -p "$port" -S "F0 52 00 $mod 31 04 07 20 00 F7" -i 0.2
    printf "%s\n" "was unset, remove character with space"
    ;;
  ' 2a')
    amidi -p "$port" -S "F0 52 00 $mod 31 04 07 20 00 F7" -i 0.2
    printf "%s\n" "was blank, remove character with space"
    ;;
  *)
    amidi -p "$port" -S "F0 52 00 $mod 31 04 07 $pname7h 00 F7" -i 0.2
    printf "%s\n" "$pname7h"
esac

pname8=$(printf "%s" "$pname" | cut -c 9-9)
printf "%s\n" "pname8: $pname8"
pname8h=$(printf "%s" "$pname8" | od -A n -t x1)
printf "%s\n" "$pname8h"
case $pname8h in
  "")
    amidi -p "$port" -S "F0 52 00 $mod 31 04 08 20 00 F7" -i 0.2
    printf "%s\n" "was unset, remove character with space"
    ;;
  ' 2a')
    amidi -p "$port" -S "F0 52 00 $mod 31 04 08 20 00 F7" -i 0.2
    printf "%s\n" "was blank, remove character with space"
    ;;
  *)
    amidi -p "$port" -S "F0 52 00 $mod 31 04 08 $pname8h 00 F7" -i 0.2
    printf "%s\n" "$pname8h"
esac

pname9=$(printf "%s" "$pname" | cut -c 10-10)
printf "%s\n" "pname9: $pname9"
pname9h=$(printf "%s" "$pname9" | od -A n -t x1)
printf "%s\n" "$pname9h"
case $pname9h in
  "")
    amidi -p "$port" -S "F0 52 00 $mod 31 04 09 20 00 F7" -i 0.2
    printf "%s\n" "was unset, remove character with space"
    ;;
  ' 2a')
    amidi -p "$port" -S "F0 52 00 $mod 31 04 09 20 00 F7" -i 0.2
    printf "%s\n" "was blank, remove character with space"
    ;;
  *)
    amidi -p "$port" -S "F0 52 00 $mod 31 04 09 $pname9h 00 F7" -i 0.2
    printf "%s\n" "$pname9h"
esac


# Effect slots and Pedal-/ Switchassignment
# Module 0:
m0p0=$(xml sel -t -v "(PatchData/Module0/Prm0)" -n "$file")
amidi -p "$port" -S "f0 52 00 $mod 31 00 00 $m0p0 00 f7" -i 0.2

m0p1=$(xml sel -t -v "(PatchData/Module0/Prm1)" -n "$file")
m0p1h=$(echo "obase=16; $m0p1" | bc)
amidi -p "$port" -S "f0 52 00 $mod 31 00 01 $m0p1h 00 f7" -i 0.2

m0p2=$(xml sel -t -v "(PatchData/Module0/Prm2)" -n "$file")
m0p2h=$(echo "obase=16; $m0p2" | bc)
amidi -p "$port" -S "F0 52 00 $mod 31 00 02 $m0p2h 00 F7" -i 0.2

m0p3=$(xml sel -t -v "(PatchData/Module0/Prm3)" -n "$file")
m0p3h=$(echo "obase=16; $m0p3" | bc)
amidi -p "$port" -S "F0 52 00 $mod 31 00 03 $m0p3h 00 F7" -i 0.2

m0p4=$(xml sel -t -v "(PatchData/Module0/Prm4)" -n "$file")
m0p4h=$(echo "obase=16; $m0p4" | bc)
amidi -p "$port" -S "F0 52 00 $mod 31 00 04 $m0p4h 00 F7" -i 0.2

m0p5=$(xml sel -t -v "(PatchData/Module0/Prm5)" -n "$file")
m0p5h=$(echo "obase=16; $m0p5" | bc)
amidi -p "$port" -S "F0 52 00 $mod 31 00 05 $m0p5h 00 F7" -i 0.2

m0p6=$(xml sel -t -v "(PatchData/Module0/Prm6)" -n "$file")
m0p6h=$(echo "obase=16; $m0p6" | bc)
amidi -p "$port" -S "F0 52 00 $mod 31 00 06 $m0p6h 00 F7" -i 0.2

m0p7=$(xml sel -t -v "(PatchData/Module0/Prm7)" -n "$file")
m0p7h=$(echo "obase=16; $m0p7" | bc)
amidi -p "$port" -S "F0 52 00 $mod 31 00 07 $m0p7h 00 F7" -i 0.2

m0p8=$(xml sel -t -v "(PatchData/Module0/Prm8)" -n "$file")
m0p8h=$(echo "obase=16; $m0p8" | bc)
amidi -p "$port" -S "F0 52 00 $mod 31 00 08 $m0p8h 00 F7" -i 0.2

m0p9=$(xml sel -t -v "(PatchData/Module0/Prm9)" -n "$file")
m0p9h=$(echo "obase=16; $m0p9" | bc)
amidi -p "$port" -S "F0 52 00 $mod 31 00 09 $m0p9h 00 F7" -i 0.2

m0p10=$(xml sel -t -v "(PatchData/Module0/Prm10)" -n "$file")
m0p10h=$(echo "obase=16; $m0p10" | bc)
amidi -p "$port" -S "F0 52 00 $mod 31 00 0A $m0p10h 00 F7" -i 0.2


# Module 1:
m1p0=$(xml sel -t -v "(PatchData/Module1/Prm0)" -n "$file")
amidi -p "$port" -S "F0 52 00 $mod 31 01 00 $m1p0 00 F7" -i 0.2

m1p1=$(xml sel -t -v "(PatchData/Module1/Prm1)" -n "$file")
m1p1h=$(echo "obase=16; $m1p1" | bc)
amidi -p "$port" -S "f0 52 00 $mod 31 01 01 $m1p1h 00 f7" -i 0.2

m1p2=$(xml sel -t -v "(PatchData/Module1/Prm2)" -n "$file")
m1p2h=$(echo "obase=16; $m1p2" | bc)
amidi -p "$port" -S "F0 52 00 $mod 31 01 02 $m1p2h 00 F7" -i 0.2

m1p3=$(xml sel -t -v "(PatchData/Module1/Prm3)" -n "$file")
m1p3h=$(echo "obase=16; $m1p3" | bc)
amidi -p "$port" -S "F0 52 00 $mod 31 01 03 $m1p3h 00 F7" -i 0.2

m1p4=$(xml sel -t -v "(PatchData/Module1/Prm4)" -n "$file")
m1p4h=$(echo "obase=16; $m1p4" | bc)
amidi -p "$port" -S "F0 52 00 $mod 31 01 04 $m1p4h 00 F7" -i 0.2

m1p5=$(xml sel -t -v "(PatchData/Module1/Prm5)" -n "$file")
m1p5h=$(echo "obase=16; $m1p5" | bc)
amidi -p "$port" -S "F0 52 00 $mod 31 01 05 $m1p5h 00 F7" -i 0.2

m1p6=$(xml sel -t -v "(PatchData/Module1/Prm6)" -n "$file")
m1p6h=$(echo "obase=16; $m1p6" | bc)
amidi -p "$port" -S "F0 52 00 $mod 31 01 06 $m1p6h 00 F7" -i 0.2

m1p7=$(xml sel -t -v "(PatchData/Module1/Prm7)" -n "$file")
m1p7h=$(echo "obase=16; $m1p7" | bc)
amidi -p "$port" -S "F0 52 00 $mod 31 01 07 $m1p7h 00 F7" -i 0.2

m1p8=$(xml sel -t -v "(PatchData/Module1/Prm8)" -n "$file")
m1p8h=$(echo "obase=16; $m1p8" | bc)
amidi -p "$port" -S "F0 52 00 $mod 31 01 08 $m1p8h 00 F7" -i 0.2

m1p9=$(xml sel -t -v "(PatchData/Module1/Prm9)" -n "$file")
m1p9h=$(echo "obase=16; $m1p9" | bc)
amidi -p "$port" -S "F0 52 00 $mod 31 01 09 $m1p9h 00 F7" -i 0.2

m1p10=$(xml sel -t -v "(PatchData/Module1/Prm10)" -n "$file")
m1p10h=$(echo "obase=16; $m1p10" | bc)
amidi -p "$port" -S "F0 52 00 $mod 31 01 0A $m1p10h 00 F7" -i 0.2


# Module2:
m2p0=$(xml sel -t -v "(PatchData/Module2/Prm0)" -n "$file")
amidi -p "$port" -S "f0 52 00 $mod 31 02 00 $m2p0 00 f7" -i 0.2

m2p1=$(xml sel -t -v "(PatchData/Module2/Prm1)" -n "$file")
m2p1h=$(echo "obase=16; $m2p1" | bc)
amidi -p "$port" -S "f0 52 00 $mod 31 02 01 $m2p1h 00 f7" -i 0.2

m2p2=$(xml sel -t -v "(PatchData/Module2/Prm2)" -n "$file")
m2p2h=$(echo "obase=16; $m2p2" | bc)
amidi -p "$port" -S "F0 52 00 $mod 31 02 02 $m2p2h 00 F7" -i 0.2

m2p3=$(xml sel -t -v "(PatchData/Module2/Prm3)" -n "$file")
m2p3h=$(echo "obase=16; $m2p3" | bc)
amidi -p "$port" -S "F0 52 00 $mod 31 02 03 $m2p3h 00 F7" -i 0.2

m2p4=$(xml sel -t -v "(PatchData/Module2/Prm4)" -n "$file")
m2p4h=$(echo "obase=16; $m2p4" | bc)
amidi -p "$port" -S "F0 52 00 $mod 31 02 04 $m2p4h 00 F7" -i 0.2

m2p5=$(xml sel -t -v "(PatchData/Module2/Prm5)" -n "$file")
m2p5h=$(echo "obase=16; $m2p5" | bc)
amidi -p "$port" -S "F0 52 00 $mod 31 02 05 $m2p5h 00 F7" -i 0.2

m2p6=$(xml sel -t -v "(PatchData/Module2/Prm6)" -n "$file")
m2p6h=$(echo "obase=16; $m2p6" | bc)
amidi -p "$port" -S "F0 52 00 $mod 31 02 06 $m2p6h 00 F7" -i 0.2

m2p7=$(xml sel -t -v "(PatchData/Module2/Prm7)" -n "$file")
m2p7h=$(echo "obase=16; $m2p7" | bc)
amidi -p "$port" -S "F0 52 00 $mod 31 02 07 $m2p7h 00 F7" -i 0.2

m2p8=$(xml sel -t -v "(PatchData/Module2/Prm8)" -n "$file")
m2p8h=$(echo "obase=16; $m2p8" | bc)
amidi -p "$port" -S "F0 52 00 $mod 31 02 08 $m2p8h 00 F7" -i 0.2

m2p9=$(xml sel -t -v "(PatchData/Module2/Prm9)" -n "$file")
m2p9h=$(echo "obase=16; $m2p9" | bc)
amidi -p "$port" -S "F0 52 00 $mod 31 02 09 $m2p9h 00 F7" -i 0.2

m2p10=$(xml sel -t -v "(PatchData/Module2/Prm10)" -n "$file")
m2p10h=$(echo "obase=16; $m2p10" | bc)
amidi -p "$port" -S "F0 52 00 $mod 31 02 0A $m2p10h 00 F7" -i 0.2


# Module3 - Total modus adjustments
m3p0=$(xml sel -t -v "(PatchData/Module3/Prm0)" -n "$file")
m3p0h=$(echo "obase=16; $m3p0" | bc)
amidi -p "$port" -S "F0 52 00 $mod 31 03 02 $m3p0h 00 F7" -i 0.2

## CTRL SW(1) assign /0=no/1=FX1/2=FX2/3=FX3/4=TapTempo/5=Bypass/Mute
m3p1=$(xml sel -t -v "(PatchData/Module3/Prm1)" -n "$file")
#m3p1h=$(echo "obase=16; $m3p1" | bc)
amidi -p "$port" -S "F0 52 00 $mod 31 03 06 $m3p1 00 F7" -i 0.2

## CTRL SW(2) assign - if a preset (m3p1) has more than one Option
m3p2=$(xml sel -t -v "(PatchData/Module3/Prm2)" -n "$file")
#m3p2h=$(echo "obase=16; $m3p2" | bc)
amidi -p "$port" -S "F0 52 00 $mod 31 03 07 $m3p2 00 F7" -i 0.2

## CTRL PDL DEST
m3p3=$(xml sel -t -v "(PatchData/Module3/Prm3)" -n "$file")
amidi -p "$port" -S "F0 52 00 $mod 31 03 03 00 $m3p3 F7" -i 0.2
																	        
m3p4=$(xml sel -t -v "(PatchData/Module3/Prm4)" -n "$file")
m3p4h=$(echo "obase=16; $m3p4" | bc)
amidi -p "$port" -S "F0 52 00 $mod 31 03 04 $m3p4h 00 F7" -i 0.2

m3p5=$(xml sel -t -v "(PatchData/Module3/Prm5)" -n "$file")
m3p5h=$(echo "obase=16; $m3p5" | bc)
amidi -p "$port" -S "F0 52 00 $mod 31 03 05 $m3p5h 00 F7" -i 0.2

#m3p6=$(xml sel -t -v "(PatchData/Module3/Prm6)" -n "$file")
#m3p6h=$(echo "obase=16; $m3p6" | bc)
#amidi -p "$port" -S "F0 52 00 $mod 31 03 06 $m3p6h 00 F7" -i 0.2

m3p7=$(xml sel -t -v "(PatchData/Module3/Prm7)" -n "$file")
m3p7h=$(echo "obase=16; $m3p7" | bc)
amidi -p "$port" -S "F0 52 00 $mod 31 03 0A $m3p7h 00 F7" -i 0.2

#m3p8=$(xml sel -t -v "(PatchData/Module3/Prm8)" -n "$file")
#m3p8h=$(echo "obase=16; $m3p8" | bc)
#amidi -p "$port" -S "F0 52 00 $mod 31 03 08 $m3p8h 00 F7" -i 0.2

#m3p9=$(xml sel -t -v "(PatchData/Module3/Prm9)" -n "$file")
#m3p9h=$(echo "obase=16; $m3p9" | bc)
#amidi -p "$port" -S "F0 52 00 $mod 31 03 02 $m3p9h 00 F7" -i 0.2

#m3p10=$(xml sel -t -v "(PatchData/Module3/Prm10)" -n "$file")
#m3p10h=$(echo "obase=16; $m3p10" | bc)
#amidi -p "$port" -S "F0 52 00 $mod 31 03 0A $m3p10h 00 F7" -i 0.2

#m4p0
# ??? I've never seen a .b3p-file that uses Module4, maybe for a another Version or a hidden feature.
# at the moment only interesting for potential checksum calculations.

## Wait (for too long), but otherwise the Patch will reverse and the message not accepted.
## Or let the device open. 
printf "%s\n" ""
printf "%s\n" "Unfortunately we have to wait approx six (5.3) seconds for accepting, before we can lock the device."
printf "%s\n" "Otherwise the device will shelve back the patch."
printf "%s\n" "Close Sesame!"
sleep 6
## Lock device again:
amidi -p "$port" -S "F0 52 00 $mod 51 F7"

printf "%s\n" ""
printf "%s\n" "done..."
# ...
# to be continued...
